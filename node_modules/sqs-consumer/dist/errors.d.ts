import { AWSError } from './types';
declare class SQSError extends Error {
    code: string;
    statusCode: number;
    service: string;
    time: Date;
    retryable: boolean;
    fault: 'client' | 'server';
    constructor(message: string);
}
declare class TimeoutError extends Error {
    cause: Error;
    time: Date;
    constructor(message?: string);
}
declare class StandardError extends Error {
    cause: Error;
    time: Date;
    constructor(message?: string);
}
/**
 * Checks if the error provided should be treated as a connection error.
 * @param err The error that was received.
 */
declare function isConnectionError(err: Error): boolean;
/**
 * Formats an AWSError the the SQSError type.
 * @param err The error object that was received.
 * @param message The message to send with the error.
 */
declare function toSQSError(err: AWSError, message: string): SQSError;
/**
 * Formats an Error to the StandardError type.
 * @param err The error object that was received.
 * @param message The message to send with the error.
 */
declare function toStandardError(err: Error, message: string): StandardError;
/**
 * Formats an Error to the TimeoutError type.
 * @param err The error object that was received.
 * @param message The message to send with the error.
 */
declare function toTimeoutError(err: TimeoutError, message: string): TimeoutError;
export { SQSError, TimeoutError, isConnectionError, toSQSError, toStandardError, toTimeoutError };
