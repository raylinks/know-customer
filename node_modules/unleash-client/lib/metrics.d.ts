/// <reference types="node" />
import { EventEmitter } from 'events';
import { CustomHeaders, CustomHeadersFunction } from './headers';
import { HttpOptions } from './http-options';
export interface MetricsOptions {
    appName: string;
    instanceId: string;
    strategies: string[];
    metricsInterval: number;
    metricsJitter?: number;
    disableMetrics?: boolean;
    url: string;
    headers?: CustomHeaders;
    customHeadersFunction?: CustomHeadersFunction;
    timeout?: number;
    httpOptions?: HttpOptions;
}
interface VariantBucket {
    [s: string]: number;
}
interface Bucket {
    start: Date;
    stop?: Date;
    toggles: {
        [s: string]: {
            yes: number;
            no: number;
            variants: VariantBucket;
        };
    };
}
interface MetricsData {
    appName: string;
    instanceId: string;
    bucket: Bucket;
}
interface RegistrationData {
    appName: string;
    instanceId: string;
    sdkVersion: string;
    strategies: string[];
    started: Date;
    interval: number;
}
export default class Metrics extends EventEmitter {
    private bucket;
    private appName;
    private instanceId;
    private sdkVersion;
    private strategies;
    private metricsInterval;
    private metricsJitter;
    private failures;
    private disabled;
    private url;
    private timer;
    private started;
    private headers?;
    private customHeadersFunction?;
    private timeout?;
    private httpOptions?;
    constructor({ appName, instanceId, strategies, metricsInterval, metricsJitter, disableMetrics, url, headers, customHeadersFunction, timeout, httpOptions, }: MetricsOptions);
    private getAppliedJitter;
    getFailures(): number;
    getInterval(): number;
    private startTimer;
    start(): void;
    stop(): void;
    registerInstance(): Promise<boolean>;
    configurationError(url: string, statusCode: number): void;
    backoff(url: string, statusCode: number): void;
    sendMetrics(): Promise<void>;
    reduceBackoff(): void;
    assertBucket(name: string): void;
    count(name: string, enabled: boolean): void;
    countVariant(name: string, variantName: string): void;
    private increaseCounter;
    private increaseVariantCounter;
    private bucketIsEmpty;
    private createBucket;
    private resetBucket;
    createMetricsData(): MetricsData;
    private restoreBucket;
    getClientData(): RegistrationData;
}
export {};
//# sourceMappingURL=metrics.d.ts.map